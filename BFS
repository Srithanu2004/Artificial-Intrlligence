from collections import defaultdict, deque
class Graph:
    def __init__(self):
        self.graph = defaultdict(list)
    def add_edge(self, u, v):
        self.graph[u].append(v)
    def bfs(self, start_vertex):
        visited = set()
        queue = deque()
        visited_order = []
        queue.append(start_vertex)
        visited.add(start_vertex)
        while queue:
            current_vertex = queue.popleft()
            visited_order.append(current_vertex)
            for neighbor in self.graph[current_vertex]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor) 
        return visited_order
    def shortest_path(self, start_vertex, end_vertex):
        queue = deque([[start_vertex]])
        visited = {start_vertex}
        while queue:
            path = queue.popleft()
            vertex = path[-1]
            if vertex == end_vertex:
                return path, len(path) - 1
            for neighbor in self.graph[vertex]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    new_path = list(path)
                    new_path.append(neighbor)
                    queue.append(new_path)
        
        return None, None  

# Example usage
def main():
    # Create a graph and add edges
    g = Graph()
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 2)
    g.add_edge(2, 0)
    g.add_edge(2, 3)
    g.add_edge(3, 3)
    
    print("BFS starting from vertex 2:")
    result = g.bfs(2)
    print(result)
    
    # Find shortest path
    path, distance = g.shortest_path(0, 3)
    if path:
        print(f"\nShortest path from 0 to 3:")
        print(f"Path: {path}")
        print(f"Distance: {distance} edges")
    else:
        print("\nNo path exists")

if __name__ == "__main__":
    main()
