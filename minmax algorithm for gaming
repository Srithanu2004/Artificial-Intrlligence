import math

# Constants
PLAYER_X = "X"
PLAYER_O = "O"
EMPTY = " "

def check_winner(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)):
        return True
    return False

def is_full(board):
    return all(board[i][j] != EMPTY for i in range(3) for j in range(3))

def minimax(board, depth, is_maximizing):
    if check_winner(board, PLAYER_X): return 10 - depth
    if check_winner(board, PLAYER_O): return depth - 10
    if is_full(board): return 0
    
    if is_maximizing:
        best = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_X
                    best = max(best, minimax(board, depth+1, False))
                    board[i][j] = EMPTY
        return best
    else:
        best = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_O
                    best = min(best, minimax(board, depth+1, True))
                    board[i][j] = EMPTY
        return best

def best_move(board):
    best_val = -math.inf
    move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_X
                move_val = minimax(board, 0, False)
                board[i][j] = EMPTY
                if move_val > best_val:
                    best_val = move_val
                    move = (i, j)
    return move

# Main function to run the game
def play_game():
    board = [[EMPTY]*3 for _ in range(3)]
    while True:
        print('\n'.join([' | '.join(row) for row in board]))
        if check_winner(board, PLAYER_X):
            print("AI wins!")
            break
        if check_winner(board, PLAYER_O):
            print("Player O wins!")
            break
        if is_full(board):
            print("It's a draw!")
            break

        # AI Move (Player X)
        i, j = best_move(board)
        board[i][j] = PLAYER_X

        # Player Move (Player O)
        row, col = map(int, input("Player O, enter row and col: ").split())
        if board[row][col] == EMPTY:
            board[row][col] = PLAYER_O
        else:
            print("Invalid move. Try again.")

# Start the game
if __name__ == "__main__":
    play_game()
